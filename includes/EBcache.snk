rule EBcacheMatrix:
    input:
        config['EBscore']['pon_list']
    output:
        "matrix/{chrom}.pon.gz"
    threads:
        config['EBscore']['threads']['EBcacheMatrix']
    conda:
        f"../{config['envs']}/sampy-env.yml"
    params:
        pon_path = static_path(config['EBscore']['pon_path']),
        pon_list = config['EBscore']['pon_list'],
        genome_split = full_path('genome_split'),
        bedfile = full_path('bed_file_pad')
    script:
        "../scripts/EBcache_matrix.py"

rule splitEBcacheMatrix:
    input: 
        matrix="matrix/{chrom}.pon.gz"
    output:
        expand("split/{{chrom}}.{split}.pon.gz", split=list(range(config['EBscore']['ABcache_split'])))
    threads:
        10
    params:
        split = config['EBscore']['ABcache_split']
    conda:
        f"../{config['envs']}/sampy-env.yml"
    script:
        "../scripts/EBcache_splitmatrix.py"


rule EBcacheZeros:
    output:
        touch("zero/done")
    threads:
        10
    conda:
        f"../{config['envs']}/samscipy-env.yml"
    params:
        pon_path = static_path(config['EBscore']['pon_path']),
        pon_list = config['EBscore']['pon_list'],
        reflat = config['EBscore']['reflat']
    script:
        "../scripts/EBcache_zeros.py"

rule EBcacheAB:
    input:
        matrix="split/{chrom}.{split}.pon.gz"
    output:
        "split/{chrom}.{split}.AB.gz"
    threads:
        config['EBscore']['threads']['EBcacheAB']
    conda:
        "../env/samscipy-env.yml"
    params:
        pon_path = static_path(config['EBscore']['pon_path'])
    script:
        "../scripts/EBcache_AB.py"


rule combineEBcacheAB:
    input:
        expand("split/{{chrom}}.{split}.AB.gz", split=list(range(config['EBscore']['ABcache_split'])))
    output:
        AB="AB/{chrom}.AB.gz"
    threads:
        6
    run:
        dfs = []
        for file in input:
            df = pd.read_csv(file, sep="\t", compression="gzip")
            dfs.append(df)
        AB_df = pd.concat(dfs).sort_values("Start")
        AB_df.to_csv(output.AB, sep="\t", index=False, compression="gzip")


rule EBcacheDone:
    input:
        expand("AB/{chrom}.AB.gz", chrom=chrom_list)
    output:
        touch("EBcache.done")
    params:
        pon_path = static_path(config['EBscore']['pon_path']),
        pon_list = config['EBscore']['pon_list'],
        reflat = True
    threads:
        24
    conda:
        f"../{config['envs']}/sampy-env.yml"
    script:
        "../scripts/EBcache_zeros.py"
