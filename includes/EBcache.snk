rule EBcacheMatrix:
    input:
        config['EBscore']['pon_list']
    output:
        "matrix/{chrom}.pon.gz"
    threads:
        config['EBscore']['threads']['EBcacheMatrix']
    conda:
        f"../{config['envs']}/eb-env.yml"
    params:
        pon_path = static_path(config['EBscore']['pon_path']),
        pon_list = config['EBscore']['pon_list'],
        genome_split = full_path('genome_split'),
        bedfile = full_path('bed_file')
    script:
        "../scripts/EBcache_matrixsnake.py"


rule EBcacheAB:
    input:
        "matrix/{chrom}.pon.gz"
    output:
        "AB/{chrom}.AB.gz"
    threads:
        config['EBscore']['threads']['EBcacheAB']
    conda:
        f"../{config['envs']}/eb-env.yml"
    params:
        pon_path = static_path(config['EBscore']['pon_path'])
    script:
        "../scripts/EBcache_ABsnake.py"
        

rule EBcacheDone:
    input:
        expand("AB/{chrom}.AB.gz", chrom=chrom_list)
    output:
        touch("PONcache.done")
    params:
        zero_path = os.path.join(static_path(config['EBscore']['pon_list']), "zero"),
    threads:
        2
    conda:
        f"../{config['envs']}/eb-env.yml"
    script:
        "../scripts/EBcache_done.py"
