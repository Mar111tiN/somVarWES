rule filter_pileup:
    input:
        filter_file = "table/{sample}_{tumor}-{normal}.filter1.csv",
        bam = get_bam_path
    output: "hdr/{sample}_{tumor}-{normal}_{type}.{chrom}.filter1.pileup"
    threads:
        2
    conda:
        f"../{config['envs']}/eb-env.yml"
    params:
        refgen = full_path('genome'),
        qual = f"-q {config['mpileup']['MAPQ']} -Q {config['mpileup']['Q']}",
        mut_bedfile = get_mut_bed
    shell:
        "samtools mpileup -l {params.mut_bedfile} -f {params.refgen} -r {wildcards.chrom} {params.qual} {input.bam} > {output}; "
        "rm -f {params.mut_bedfile} "


rule detect_HDR:
    input:
        bam = get_bam_path,
        filter_file = "table/{sample}_{tumor}-{normal}.filter1.csv",
        pileup = "hdr/{sample}_{tumor}-{normal}_{type}.{chrom}.filter1.pileup"
    output:
        HDR_table = "hdr/{sample}_{tumor}-{normal}_{type}.{chrom}.filter1.HDR.csv"
    conda:
        f"../{config['envs']}/eb-env.yml"
    threads:
        config['HDR']['threads']
    params:
        genome_split = full_path('genome_split')
    script:
        "../scripts/runHDR.py"


rule merge_HDR:
    input:
        tumor = expand("hdr/{{sample}}_{{tumor}}-{{normal}}_{{tumor}}.{chrom}.filter1.HDR.csv", chrom=chrom_list),
        normal = expand("hdr/{{sample}}_{{tumor}}-{{normal}}_{{normal}}.{chrom}.filter1.HDR.csv", chrom=chrom_list)
    output:
        "table/{sample}_{tumor}-{normal}.filter1.HDR.csv"
    threads:
        1
    script:
        "../scripts/mergeHDR.py"