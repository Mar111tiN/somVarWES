# ################# FILTER ###################################################
rule filter1:
    input: "filter/{sample}_{tumor}-{normal}.csv"
    output: 
        filter1 = "table/{sample}_{tumor}-{normal}.filter1.csv",
        basic = "filter/{sample}_{tumor}-{normal}.basic.csv"
    wildcard_constraints:
        sample = "[^_]+"
    params:
        snakedir=snakedir
    threads:
        config['filter']['threads']
    script:
        "../scripts/filter1.py" 


rule primer3:
    input: "table/{sample}_{tumor}-{normal}.filter1.csv"
    output: "table/{sample}_{tumor}-{normal}.filter1.primer.csv"
    conda:
        f"../{config['envs']}/primer3-env.yml"
    threads:
        config['primer3']['threads']
    params:
        genome_split = full_path('genome_split')
    script:
        "../scripts/primer.py"


rule combine_filter1:
    input:
        filter1 = "table/{sample}_{tumor}-{normal}.filter1.csv",
        primer = "table/{sample}_{tumor}-{normal}.filter1.primer.csv",
        HDR = "table/{sample}_{tumor}-{normal}.filter1.HDR.csv"
    output: "filter/{sample}_{tumor}-{normal}.filter1.csv"
    threads: 1
    run:
        ## merge the files
        show_output(f'Merging {input.primer} and {input.HDR} into {input.filter1}..')
        filter1_df = pd.read_csv(input.filter1, sep='\t')
        HDR_df = pd.read_csv(input.HDR, sep='\t')
        primer_df = pd.read_csv(input.primer, sep='\t')
        merge = pd.merge(filter1_df, HDR_df, how='inner', on=['Chr', 'Start', 'End', 'Ref', 'Alt', 'Gene'])
        merge_df = pd.merge(merge, primer_df, how='inner', on=['Chr', 'Start', 'End', 'Ref', 'Alt', 'Gene'])

        output = str(output)
        show_output(f"Writing merged filter1-list to {output}.", time=False)
        sort_df(merge_df).to_csv(output, sep='\t', index = False)


rule filter2:
    input: 
        filter1 = "filter/{sample}_{tumor}-{normal}.filter1.csv"
    output: 
        # filter2.loose is a placeholder for all the filter2 files:
        #  loose.csv
        #  moderate.csv
        #  strict.csv
        filter2 = "filter/{sample}_{tumor}-{normal}.filter2.loose.csv",
        filter2_for_filterbam = "table/{sample}_{tumor}-{normal}.filter2.csv"  # contains mutations at stringency defined in "filter_bam->stringency_for_bam"
    threads: 
        1
    script:
        f"../scripts/filter2.py" 


rule filter_bam:
    input:
        filter_file = "table/{sample}_{tumor}-{normal}.filter2.csv",
        bam = get_bam_path,
    output: "filterbam/{sample}_{tumor}-{normal}_{type}.bam"
    conda:
        f"../{config['envs']}/eb-env.yml"
    threads:
        config['filter_bam']['threads']
    params:
        mut_bedfile = get_mut_bed
    shell:
        "samtools view -bhL {params.mut_bedfile} {input.bam} > {output}; "
        "samtools index {output}; "
        "rm -f {params.mut_bedfile}"


rule IGVnav:
    input:
        filter_file = "filter/{sample}_{tumor}-{normal}.filter2.loose.csv",
        tumor_filterbam = "filterbam/{sample}_{tumor}-{normal}_{normal}.bam",
        normal_filterbam = "filterbam/{sample}_{tumor}-{normal}_{tumor}.bam"
    output:
        IGVnav = "filterbam/{sample}_{tumor}-{normal}.filter2.IGVnav.txt"
    threads:
        1
    run:
        # selectinng the right filter2 file from the configs
        filter_file = input.filter_file.replace(".loose.csv", f".{config['filter_bam']['stringency_for_IGVnav']}.csv")
        df = pd.read_csv(filter_file, sep='\t', index_col=False).iloc[:, :5]
        print(f'Loaded {filter_file}')
        for col in ['Call', 'Tags', 'Notes']:
            df[col] = ''
        df.loc[:, 'Chr'] = df['Chr'].str.replace('chr', '')
        df.to_csv(str(output), sep='\t', index=False)
        print(f"Written to {output.IGVnav}")


