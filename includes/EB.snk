rule anno2EB:
    input:
        table = "table/{sample}_{tumor}-{normal}.csv",
        cleanpileup = "pileup/{sample}_{tumor}-{normal}.{chrom}.gz"
    output:
        "eb/{sample}_{tumor}-{normal}.{chrom}.EB"
    log:
        "logs/eb/{sample}_{tumor}-{normal}.{chrom}.log"
    threads:
        config['EBscore']['threads']['EBscore']
    conda:
        f"../{config['envs']}/samscipy-env.yml"
    params:
        pon_path = static_path(config['EBscore']['pon_path']),
        pon_list = config['EBscore']['pon_list'],
        genome_split = full_path('genome_split')
    script:
        "../scripts/ebsnake.py"


rule mergeEBscore:
    input:
        expand("eb/{{sample}}_{{tumor}}-{{normal}}.{chrom}.EB", chrom=chrom_list)
    output:
        "table/{sample}_{tumor}-{normal}.EB.csv"
    threads:
        1
    run:
        EB_dfs = []
        for EB_file in input:
            if os.path.isfile(EB_file):
                if os.path.getsize(EB_file ) > 20:
                    EB_df = pd.read_csv(EB_file, sep='\t', index_col=False)
                    # cleanup after
                    # shell(f"rm {EB_file}")
                    if EB_df.empty:
                        continue
                    EB_dfs.append(EB_df)
        EB_merge = pd.concat(EB_dfs)

        EB_merge = sort_df(EB_merge)
        # sort nicely
        cols = ['Chr', 'Start', 'End', 'Ref', 'Alt', 'EB']
        if config['EBscore']['PON_output']:
            cols += ["PON+", "PON-"]
        EB_merge = EB_merge.loc[:, cols]
        EB_merge.to_csv(output[0], sep='\t', index=False)
        show_output(f"Written EB-annotated file to {output[0]}", color='success')
