import os
import re
import yaml
import argparse
import math

# ############ SETUP ##############################
configfile: "configs/config_test.yaml"
# configfile: "configs/config.json"
cache_folder = os.path.join(config['paths']['static'], config['EBFilter']['cache_folder'])
work_dir = os.path.join(cache_folder, "EBcache")
workdir: work_dir

# ############ GLOBALS ############################
def get_chrom(c, use_chr=True):
    if c > 21:
        if c == 22:
            chrom = "X"
        if c == 23:
            chrom = "Y"
    else:
        chrom = c + 1        
    return f"chr{chrom}" if use_chr else chrom
# get the chrom list for all the splits (range24 for all chromosomes)
chrom_list = [get_chrom(chrom, (config['ref']['build'] == 'hg38')) for chrom in range(23)]  # set use_chr to False if using hg19
# chrom_list = [f"chr{chrom + 1}" for chrom in range(22)] + ['chrX', 'chrY']
# print(chrom_list)
split_factor = config['EBFilter']['threads']['EBsplit_factor']

# ############ INCLUDES ###########################
# include helper functions
include: "includes/io.snk"
include: "includes/utils.snk"
include: "includes/EBcache.snk"

# specified wildcards have to match the regex
wildcard_constraints:
    # eg sample cannot contain _ or / to prevent ambiguous wildcards
    chrom = "[^_/.]+",
    i = "[^_/.]+"


rule all:
    input:
        expand("{chrom}.cache", chrom=chrom_list),
        expand("{chrom}.matrix", chrom=chrom_list)

onstart:
    print(f" Generating Cache files in {work_dir}.......")

onsuccess:
    print(f"Workflow finished - EBcache has been generated and stored in {work_dir}")